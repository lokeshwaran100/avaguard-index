{
  "address": "0xFb0903ce7B1Daf61C013a1Fb30a06F1224536711",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agiToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dex",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wavax",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fundName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fundTicker",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fundAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "underlyingTokens",
          "type": "address[]"
        }
      ],
      "name": "FundCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUND_CREATION_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agiToken",
      "outputs": [
        {
          "internalType": "contract AGIToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fundName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fundTicker",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "createFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creatorFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundById",
      "outputs": [
        {
          "internalType": "contract Fund",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funds",
      "outputs": [
        {
          "internalType": "contract Fund",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getCreatorFunds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fundId",
          "type": "uint256"
        }
      ],
      "name": "getFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "fundName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fundTicker",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "underlyingTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getFunds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAgiToken",
          "type": "address"
        }
      ],
      "name": "updateAgiToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDex",
          "type": "address"
        }
      ],
      "name": "updateDex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWavax",
          "type": "address"
        }
      ],
      "name": "updateWavax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wavax",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3188f0ba1a5fef83097522738b54675249b4fead5bf17e005f9fe7aff58bff3f",
  "receipt": {
    "to": null,
    "from": "0xe63D399611EA823F7442b78d43F972fF61D7b05C",
    "contractAddress": "0xFb0903ce7B1Daf61C013a1Fb30a06F1224536711",
    "transactionIndex": 0,
    "gasUsed": "3791196",
    "logsBloom": "0x
    "blockHash": "0xfba7208b1f5641a41a3b95cf4be8b61c8705e2452036a95d2bc4d8a20f79aeed",
    "transactionHash": "0x3188f0ba1a5fef83097522738b54675249b4fead5bf17e005f9fe7aff58bff3f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 45456036,
        "transactionHash": "0x3188f0ba1a5fef83097522738b54675249b4fead5bf17e005f9fe7aff58bff3f",
        "address": "0xFb0903ce7B1Daf61C013a1Fb30a06F1224536711",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e63d399611ea823f7442b78d43f972ff61d7b05c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfba7208b1f5641a41a3b95cf4be8b61c8705e2452036a95d2bc4d8a20f79aeed"
      }
    ],
    "blockNumber": 45456036,
    "cumulativeGasUsed": "3791196",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xefaAE152f5cFcbe84306aeC25a1Ce593B3c34227",
    "0x3C8aFa3DB81119aE323DcDBeB92203ecfe9B8A76",
    "0xe63D399611EA823F7442b78d43F972fF61D7b05C",
    "0x2D99ABD9008Dc933ff5c0CD271B88309593aB921",
    "0xd00ae08403B9bbb9124bB305C09058E32C39A48c",
    "0xe63D399611EA823F7442b78d43F972fF61D7b05C"
  ],
  "numDeployments": 1,
  "solcInputHash": "ecfaaea14e462492c7162c20e73f855d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wavax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fundName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fundTicker\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"}],\"name\":\"FundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUND_CREATION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agiToken\",\"outputs\":[{\"internalType\":\"contract AGIToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fundTicker\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"createFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundById\",\"outputs\":[{\"internalType\":\"contract Fund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funds\",\"outputs\":[{\"internalType\":\"contract Fund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorFunds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"}],\"name\":\"getFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fundTicker\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getFunds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAgiToken\",\"type\":\"address\"}],\"name\":\"updateAgiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDex\",\"type\":\"address\"}],\"name\":\"updateDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWavax\",\"type\":\"address\"}],\"name\":\"updateWavax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wavax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Avanguard Index\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"createFund(string,string,address[])\":{\"details\":\"Create a new fund\",\"params\":{\"fundName\":\"Name of the fund\",\"fundTicker\":\"Ticker symbol for the fund\",\"tokens\":\"Array of underlying token addresses\"}},\"creationFee()\":{\"details\":\"Returns the fund creation fee.\"},\"getCreatorFunds(address)\":{\"details\":\"Get all funds created by a specific creator\",\"params\":{\"creator\":\"The creator address\"},\"returns\":{\"_0\":\"Array of fund IDs created by the creator\"}},\"getFund(uint256)\":{\"details\":\"Get fund information by ID\",\"params\":{\"fundId\":\"The fund ID\"},\"returns\":{\"fundAddress\":\"The fund contract address\",\"fundName\":\"The fund name\",\"fundTicker\":\"The fund ticker\",\"underlyingTokens\":\"Array of underlying token addresses\"}},\"getFunds(uint256,uint256)\":{\"details\":\"Get all funds (for frontend pagination)\",\"params\":{\"endIndex\":\"Ending index\",\"startIndex\":\"Starting index\"},\"returns\":{\"_0\":\"Array of fund addresses\"}},\"getTotalFunds()\":{\"details\":\"Get total number of funds\",\"returns\":{\"_0\":\"Total number of funds created\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAgiToken(address)\":{\"details\":\"Update AGI token address (only owner)\",\"params\":{\"newAgiToken\":\"New AGI token address\"}},\"updateDex(address)\":{\"details\":\"Update DEX address (only owner)\",\"params\":{\"newDex\":\"New DEX address\"}},\"updateOracle(address)\":{\"details\":\"Update oracle address (only owner)\",\"params\":{\"newOracle\":\"New oracle address\"}},\"updateTreasury(address)\":{\"details\":\"Update treasury address (only owner)\",\"params\":{\"newTreasury\":\"New treasury address\"}},\"updateWavax(address)\":{\"details\":\"Update WAVAX address (only owner)\",\"params\":{\"newWavax\":\"New WAVAX address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Fund Factory Contract - Creates and manages index funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundFactory.sol\":\"FundFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/AGIToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * AGI Token - The governance token for Avanguard Index platform\\r\\n * Fixed supply of 1 billion tokens, no minting after deployment\\r\\n * @author Avanguard Index\\r\\n */\\r\\ncontract AGIToken is ERC20, Ownable {\\r\\n    uint256 public constant TOTAL_SUPPLY = 1_000_000_000 * 10**18; // 1 billion tokens with 18 decimals\\r\\n\\r\\n    constructor(address initialOwner) ERC20(\\\"Avanguard Index\\\", \\\"AGI\\\") Ownable(initialOwner) {\\r\\n        _mint(initialOwner, TOTAL_SUPPLY);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override to prevent minting after deployment\\r\\n     */\\r\\n    function mint(address to, uint256 amount) public pure {\\r\\n        revert(\\\"Minting disabled after deployment\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn tokens from the caller's balance\\r\\n     * @param amount Amount of tokens to burn\\r\\n     */\\r\\n    function burn(uint256 amount) public {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn tokens from a specific address (requires approval)\\r\\n     * @param from Address to burn tokens from\\r\\n     * @param amount Amount of tokens to burn\\r\\n     */\\r\\n    function burnFrom(address from, uint256 amount) public {\\r\\n        _spendAllowance(from, msg.sender, amount);\\r\\n        _burn(from, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x122cf1c8e634d02d1ec84cdbb440659dd6653f58ec7943ce237c09ea2a1b9012\",\"license\":\"MIT\"},\"contracts/Fund.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IOracle.sol\\\";\\r\\nimport \\\"./IDEX.sol\\\";\\r\\n\\r\\ninterface IWAVAX {\\r\\n    function deposit() external payable;\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\\r\\ninterface IPangolinRouter {\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    \\r\\n    function getAmountsIn(uint amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Fund Contract - Manages individual index funds\\r\\n * @author Avanguard Index\\r\\n */\\r\\ncontract Fund is ERC20, Ownable {\\r\\n    // Fund metadata\\r\\n    string public fundName;\\r\\n    string public fundTicker;\\r\\n    address[] public underlyingTokens;\\r\\n    address public creator;\\r\\n    address public oracle;\\r\\n    address public dex;\\r\\n    address public wavax;\\r\\n\\r\\n    \\r\\n    // Token balance tracking\\r\\n    mapping(address => uint256) public tokenBalances;\\r\\n    \\r\\n    // Fee structure (1% = 100 basis points)\\r\\n    uint256 public constant FEE_BASIS_POINTS = 100; // 1%\\r\\n    uint256 public constant BASIS_POINTS_DENOMINATOR = 10000;\\r\\n    uint256 public constant SLIPPAGE_BUFFER_BASIS_POINTS = 200; // 2%\\r\\n    \\r\\n    // Fee distribution percentages\\r\\n    uint256 public constant CREATOR_FEE_PERCENT = 50; // 50% to creator\\r\\n    uint256 public constant AGI_BUYBACK_PERCENT = 25; // 25% to AGI buyback\\r\\n    uint256 public constant TREASURY_PERCENT = 25;    // 25% to treasury\\r\\n    \\r\\n    // Treasury address\\r\\n    address public treasury;\\r\\n    \\r\\n    // Events\\r\\n    event FundTokenBought(address indexed buyer, uint256 avaxAmount, uint256 fundTokensMinted, uint256 feePaid);\\r\\n    event FundTokenSold(address indexed seller, uint256 fundTokensBurned, uint256 avaxReturned, uint256 feePaid);\\r\\n    event FeesDistributed(uint256 creatorFee, uint256 agiBuybackFee, uint256 treasuryFee);\\r\\n    \\r\\n    constructor(\\r\\n        string memory _fundName,\\r\\n        string memory _fundTicker,\\r\\n        address[] memory _underlyingTokens,\\r\\n        address _creator,\\r\\n        address _oracle,\\r\\n        address _treasury,\\r\\n        address _dex,\\r\\n        address _wavax\\r\\n    ) ERC20(_fundName, _fundTicker) Ownable(_creator) {\\r\\n        fundName = _fundName;\\r\\n        fundTicker = _fundTicker;\\r\\n        underlyingTokens = _underlyingTokens;\\r\\n        creator = _creator;\\r\\n        oracle = _oracle;\\r\\n        treasury = _treasury;\\r\\n        dex = _dex;\\r\\n        wavax = _wavax;\\r\\n        _transferOwnership(_creator);\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 tokensOut) {\\r\\n        require(dex != address(0), \\\"DEX not set\\\");\\r\\n        require(amountIn > 0, \\\"Amount must be > 0\\\");\\r\\n\\r\\n        IERC20(fromToken).approve(dex, amountIn);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = fromToken;\\r\\n        path[1] = toToken;\\r\\n\\r\\n        uint256 balanceBefore = IERC20(toToken).balanceOf(address(this));\\r\\n\\r\\n        IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            amountIn,\\r\\n            1, // amountOutMin (you can adjust for slippage)\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 1200 // 20 minutes\\r\\n        );\\r\\n\\r\\n        uint256 balanceAfter = IERC20(toToken).balanceOf(address(this));\\r\\n        tokensOut = balanceAfter - balanceBefore;\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Buy fund tokens with AVAX\\r\\n     */\\r\\n    function buy() external payable {\\r\\n        require(msg.value > 0, \\\"Must send AVAX\\\");\\r\\n        require(underlyingTokens.length > 0, \\\"No underlying tokens\\\");\\r\\n        \\r\\n        uint256 fee = (msg.value * FEE_BASIS_POINTS) / BASIS_POINTS_DENOMINATOR;\\r\\n        uint256 remainingAmount = msg.value - fee;\\r\\n        \\r\\n        // Calculate how many fund tokens to mint based on current fund value\\r\\n        uint256 fundTokensToMint = calculateFundTokensToMint(remainingAmount);\\r\\n        \\r\\n        // Mint fund tokens to buyer\\r\\n        _mint(msg.sender, fundTokensToMint);\\r\\n        \\r\\n        // Distribute fees\\r\\n        distributeFees(fee);\\r\\n        \\r\\n        // Buy underlying tokens with remaining AVAX\\r\\n        IWAVAX(wavax).deposit{value: remainingAmount}();\\r\\n        buyUnderlyingTokens(IERC20(wavax).balanceOf(address(this)));\\r\\n        \\r\\n        emit FundTokenBought(msg.sender, msg.value, fundTokensToMint, fee);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\nfunction buyUnderlyingTokens(uint256 wavaxAmount) internal {\\r\\n    require(wavaxAmount > 0, \\\"Amount must be greater than 0\\\");\\r\\n    require(dex != address(0), \\\"DEX not set\\\");\\r\\n\\r\\n    uint256 amountPerToken = wavaxAmount / underlyingTokens.length;\\r\\n\\r\\n    for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n        address token = underlyingTokens[i];\\r\\n        \\r\\n        if (amountPerToken > 0) {\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = wavax;\\r\\n            path[1] = token;\\r\\n\\r\\n            IERC20(wavax).approve(dex, amountPerToken);\\r\\n            uint256 balanceBefore = IERC20(token).balanceOf(address(this));\\r\\n            \\r\\n            try IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                amountPerToken,\\r\\n                1, // amountOutMin\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            ) {\\r\\n                uint256 balanceAfter = IERC20(token).balanceOf(address(this));\\r\\n                uint256 tokensReceived = balanceAfter - balanceBefore;\\r\\n                tokenBalances[token] += tokensReceived;\\r\\n            } catch {\\r\\n                // If swap fails, just continue to the next token\\r\\n                continue;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n    \\r\\nfunction sellUnderlyingTokens(uint256 sellPercentage) internal returns (uint256 totalAvaxReceived) {\\r\\n    require(dex != address(0), \\\"DEX not set\\\");\\r\\n    require(sellPercentage > 0, \\\"Sell percentage must be greater than 0\\\");\\r\\n\\r\\n    totalAvaxReceived = 0;\\r\\n\\r\\n    for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n        address token = underlyingTokens[i];\\r\\n        uint256 tokenBalance = tokenBalances[token];\\r\\n\\r\\n        if (tokenBalance > 0) {\\r\\n            uint256 tokensToSell = (tokenBalance * sellPercentage) / 1e18;\\r\\n            if (tokensToSell == 0) continue;\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = token;\\r\\n            path[1] = wavax;\\r\\n\\r\\n            IERC20(token).approve(dex, tokensToSell);\\r\\n\\r\\n            uint256 wavaxBefore = IERC20(wavax).balanceOf(address(this));\\r\\n\\r\\n            IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                tokensToSell,\\r\\n                1, // amountOutMin\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            );\\r\\n\\r\\n            uint256 wavaxAfter = IERC20(wavax).balanceOf(address(this));\\r\\n            uint256 wavaxReceived = wavaxAfter - wavaxBefore;\\r\\n\\r\\n            if (wavaxReceived > 0) {\\r\\n                IWAVAX(wavax).withdraw(wavaxReceived); // unwrap WAVAX \\u2192 AVAX\\r\\n                totalAvaxReceived += wavaxReceived;\\r\\n                tokenBalances[token] -= tokensToSell;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return totalAvaxReceived;\\r\\n}\\r\\n\\r\\n    /**\\r\\n     * @dev Sell fund tokens for AVAX\\r\\n     * @param fundTokenAmount Amount of fund tokens to sell\\r\\n     */\\r\\n    function sell(uint256 fundTokenAmount) external {\\r\\n        require(fundTokenAmount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(balanceOf(msg.sender) >= fundTokenAmount, \\\"Insufficient fund tokens\\\");\\r\\n        require(totalSupply() > 0, \\\"No fund tokens in circulation\\\");\\r\\n        \\r\\n        // Calculate the percentage of fund tokens being sold\\r\\n        uint256 sellPercentage = (fundTokenAmount * 1e18) / totalSupply(); // 18 decimals for precision\\r\\n        \\r\\n        // Sell underlying tokens proportionally and get total AVAX received\\r\\n        uint256 totalAvaxReceived = sellUnderlyingTokens(sellPercentage);\\r\\n        require(totalAvaxReceived > 0, \\\"No value to return\\\");\\r\\n        \\r\\n        // Calculate fee (1%)\\r\\n        uint256 fee = (totalAvaxReceived * FEE_BASIS_POINTS) / BASIS_POINTS_DENOMINATOR;\\r\\n        uint256 avaxToReturn = totalAvaxReceived - fee;\\r\\n        \\r\\n        // Burn fund tokens\\r\\n        _burn(msg.sender, fundTokenAmount);\\r\\n        \\r\\n        // Distribute fees\\r\\n        distributeFees(fee);\\r\\n        \\r\\n        // Transfer AVAX to seller\\r\\n        (bool success, ) = payable(msg.sender).call{value: avaxToReturn}(\\\"\\\");\\r\\n        require(success, \\\"Failed to transfer AVAX\\\");\\r\\n        \\r\\n        emit FundTokenSold(msg.sender, fundTokenAmount, avaxToReturn, fee);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\nfunction swapTokensForAvax(address token, uint256 amount) internal returns (uint256 avaxReceived) {\\r\\n    require(dex != address(0), \\\"DEX not set\\\");\\r\\n\\r\\n    IERC20(token).approve(dex, amount);\\r\\n\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = token;\\r\\n    path[1] = wavax;\\r\\n\\r\\n    uint256 balanceBefore = address(this).balance;\\r\\n\\r\\n    IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        amount,\\r\\n        1,\\r\\n        path,\\r\\n        address(this),\\r\\n        block.timestamp + 1200\\r\\n    );\\r\\n\\r\\n    // unwrap WAVAX to AVAX\\r\\n    uint256 wavaxBalance = IERC20(wavax).balanceOf(address(this));\\r\\n    IWAVAX(wavax).withdraw(wavaxBalance);\\r\\n\\r\\n    uint256 balanceAfter = address(this).balance;\\r\\n    avaxReceived = balanceAfter - balanceBefore;\\r\\n}\\r\\n\\r\\n    /**\\r\\n     * @dev Swap AVAX for tokens using DEX\\r\\n     * @param token The token address to receive\\r\\n     * @param avaxAmount The amount of AVAX to swap\\r\\n     * @return tokensReceived The amount of tokens received\\r\\n     */\\r\\n    function swapAvaxForTokens(address token, uint256 avaxAmount) internal returns (uint256 tokensReceived) {\\r\\n        require(dex != address(0), \\\"DEX not set\\\");\\r\\n        require(avaxAmount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        \\r\\n        // Get the expected token output from DEX\\r\\n        uint256 expectedTokens = IDEX(dex).getAmountsOut(address(0), avaxAmount);\\r\\n        require(expectedTokens > 0, \\\"No token value for AVAX\\\");\\r\\n        \\r\\n        // Call the DEX swap function with AVAX value\\r\\n        // Note: In a real implementation, this would require the contract to have AVAX balance\\r\\n        // For now, we'll simulate the swap by returning the expected value\\r\\n        // The actual DEX integration would be: IDEX(dex).swapExactAVAXForTokens{value: avaxAmount}(token, expectedTokens, address(this), block.timestamp)\\r\\n        tokensReceived = expectedTokens;\\r\\n        \\r\\n        return tokensReceived;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get current fund value in AVAX\\r\\n     * @return Total fund value in AVAX\\r\\n     */\\r\\n    function getCurrentFundValue() external view returns (uint256) {\\r\\n        if (totalSupply() == 0) return 0;\\r\\n        \\r\\n        uint256 totalValue = 0;\\r\\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n            address token = underlyingTokens[i];\\r\\n            uint256 tokenBalance = tokenBalances[token];\\r\\n            \\r\\n            if (tokenBalance > 0) {\\r\\n                // Convert token balance to AVAX value using oracle prices\\r\\n                uint256 tokenPriceUSD = IOracle(oracle).getPrice(token);\\r\\n                uint256 avaxPriceUSD = IOracle(oracle).getPrice(address(0));\\r\\n                \\r\\n                if (tokenPriceUSD > 0 && avaxPriceUSD > 0) {\\r\\n                    // Calculate token value in USD\\r\\n                    uint256 tokenValueUSD = (tokenBalance * tokenPriceUSD) / 1e8;\\r\\n                    // Convert USD value to AVAX\\r\\n                    uint256 tokenValueInAvax = (tokenValueUSD * 1e8) / avaxPriceUSD;\\r\\n                    totalValue += tokenValueInAvax;\\r\\n                } else {\\r\\n                    // Fallback: use token balance as AVAX value\\r\\n                    totalValue += tokenBalance;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return totalValue;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get current fund value in USD\\r\\n     * @return Total fund value in USD (18 decimals)\\r\\n     */\\r\\n    function getCurrentFundValueUSD() internal view returns (uint256) {\\r\\n        if (totalSupply() == 0) return 0;\\r\\n        \\r\\n        uint256 totalValueUSD = 0;\\r\\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n            address token = underlyingTokens[i];\\r\\n            uint256 tokenBalance = tokenBalances[token];\\r\\n            \\r\\n            if (tokenBalance > 0) {\\r\\n                uint256 tokenPriceUSD = IOracle(oracle).getPrice(token);\\r\\n                // Calculate token value in USD\\r\\n                uint256 tokenValueUSD = (tokenBalance * tokenPriceUSD) / 1e8;\\r\\n                totalValueUSD += tokenValueUSD;\\r\\n            }\\r\\n        }\\r\\n        return totalValueUSD;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get fund token balance for a specific address\\r\\n     * @param user Address to check balance for\\r\\n     * @return Fund token balance\\r\\n     */\\r\\n    function fundTokenBalanceOf(address user) external view returns (uint256) {\\r\\n        return balanceOf(user);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Calculate how many fund tokens to mint for given AVAX amount\\r\\n     * @param avaxAmount Amount of AVAX to invest\\r\\n     * @return Fund tokens to mint\\r\\n     */\\r\\n    function calculateFundTokensToMint(uint256 avaxAmount) internal view returns (uint256) {\\r\\n        if (totalSupply() == 0) {\\r\\n            // First investment - mint tokens 1:1 with avax amount\\r\\n            return avaxAmount;\\r\\n        }\\r\\n        \\r\\n        // Apply a buffer to the investment amount to account for potential slippage on asset purchase\\r\\n        uint256 effectiveAvaxAmount = (avaxAmount * (BASIS_POINTS_DENOMINATOR - SLIPPAGE_BUFFER_BASIS_POINTS))\\r\\n            / BASIS_POINTS_DENOMINATOR;\\r\\n\\r\\n        // Get AVAX price in USD (8 decimals)\\r\\n        uint256 avaxPriceUSD = IOracle(oracle).getPrice(address(0));\\r\\n        \\r\\n        // Convert AVAX amount to USD value (18 decimals for AVAX, 8 decimals for price)\\r\\n        // avaxAmount * avaxPriceUSD / 10^8 = USD value with 18 decimals\\r\\n        uint256 avaxValueUSD = (effectiveAvaxAmount * avaxPriceUSD) / 1e8;\\r\\n        \\r\\n        // Get current fund value in USD\\r\\n        uint256 currentFundValueUSD = getCurrentFundValueUSD();\\r\\n        \\r\\n        // Calculate fund tokens to mint based on USD proportion\\r\\n        // (avaxValueUSD * totalSupply) / currentFundValueUSD\\r\\n        return (avaxValueUSD * totalSupply()) / currentFundValueUSD;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Calculate AVAX value for given fund token amount\\r\\n     * @param fundTokenAmount Amount of fund tokens\\r\\n     * @return AVAX value\\r\\n     */\\r\\n    function calculateAvaxValue(uint256 fundTokenAmount) internal view returns (uint256) {\\r\\n        if (totalSupply() == 0) return 0;\\r\\n        \\r\\n        uint256 currentFundValue = this.getCurrentFundValue();\\r\\n        return (fundTokenAmount * currentFundValue) / totalSupply();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Distribute fees to creator, AGI buyback, and treasury\\r\\n     * @param totalFee Total fee amount to distribute\\r\\n     */\\r\\n    function distributeFees(uint256 totalFee) internal {\\r\\n        uint256 creatorFee = (totalFee * CREATOR_FEE_PERCENT) / 100;\\r\\n        uint256 agiBuybackFee = (totalFee * AGI_BUYBACK_PERCENT) / 100;\\r\\n        uint256 treasuryFee = (totalFee * TREASURY_PERCENT) / 100;\\r\\n        \\r\\n        // Send to creator\\r\\n        if (creatorFee > 0) {\\r\\n            (bool success1, ) = payable(creator).call{value: creatorFee}(\\\"\\\");\\r\\n            require(success1, \\\"Failed to send creator fee\\\");\\r\\n        }\\r\\n        \\r\\n        // Send to treasury (AGI buyback will be handled by treasury)\\r\\n        if (agiBuybackFee + treasuryFee > 0) {\\r\\n            (bool success2, ) = payable(treasury).call{value: agiBuybackFee + treasuryFee}(\\\"\\\");\\r\\n            require(success2, \\\"Failed to send treasury fee\\\");\\r\\n        }\\r\\n        \\r\\n        emit FeesDistributed(creatorFee, agiBuybackFee, treasuryFee);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get underlying tokens array\\r\\n     * @return Array of underlying token addresses\\r\\n     */\\r\\n    function getUnderlyingTokens() external view returns (address[] memory) {\\r\\n        return underlyingTokens;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update treasury address (only owner)\\r\\n     * @param newTreasury New treasury address\\r\\n     */\\r\\n    function updateTreasury(address newTreasury) external onlyOwner {\\r\\n        require(newTreasury != address(0), \\\"Invalid treasury address\\\");\\r\\n        treasury = newTreasury;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update oracle address (only owner)\\r\\n     * @param newOracle New oracle address\\r\\n     */\\r\\n    function updateOracle(address newOracle) external onlyOwner {\\r\\n        require(newOracle != address(0), \\\"Invalid oracle address\\\");\\r\\n        oracle = newOracle;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update DEX address (only owner)\\r\\n     * @param newDex New DEX address\\r\\n     */\\r\\n    function updateDex(address newDex) external onlyOwner {\\r\\n        require(newDex != address(0), \\\"Invalid DEX address\\\");\\r\\n        dex = newDex;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get token balance for a specific token\\r\\n     * @param token The token address\\r\\n     * @return balance The token balance\\r\\n     */\\r\\n    function getTokenBalance(address token) external view returns (uint256) {\\r\\n        return tokenBalances[token];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Allow contract to receive AVAX\\r\\n     */\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xccb999ab55e18abaed8f6997aac8dd48fa0d8546c1814f68ab332d342a267c89\",\"license\":\"MIT\"},\"contracts/FundFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Fund.sol\\\";\\r\\nimport \\\"./AGIToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * Fund Factory Contract - Creates and manages index funds\\r\\n * @author Avanguard Index\\r\\n */\\r\\ncontract FundFactory is Ownable {\\r\\n    // Fund creation fee in AGI tokens\\r\\n    uint256 public constant FUND_CREATION_FEE = 1000 * 10**18; // 1000 AGI tokens\\r\\n    \\r\\n    // Contracts\\r\\n    AGIToken public agiToken;\\r\\n    address public oracle;\\r\\n    address public treasury;\\r\\n    address public dex;\\r\\n    address public wavax;\\r\\n    \\r\\n    // Fund tracking\\r\\n    Fund[] public funds;\\r\\n    mapping(uint256 => Fund) public fundById;\\r\\n    mapping(address => uint256[]) public creatorFunds;\\r\\n    \\r\\n    // Events\\r\\n    event FundCreated(\\r\\n        uint256 indexed fundId,\\r\\n        address indexed creator,\\r\\n        string fundName,\\r\\n        string fundTicker,\\r\\n        address fundAddress,\\r\\n        address[] underlyingTokens\\r\\n    );\\r\\n    \\r\\n    constructor(\\r\\n        address _agiToken,\\r\\n        address _oracle,\\r\\n        address _treasury,\\r\\n        address _dex,\\r\\n        address _wavax,\\r\\n        address initialOwner\\r\\n    ) Ownable(initialOwner) {\\r\\n        agiToken = AGIToken(_agiToken);\\r\\n        oracle = _oracle;\\r\\n        treasury = _treasury;\\r\\n        dex = _dex;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the fund creation fee.\\r\\n     */\\r\\n    function creationFee() external pure returns (uint256) {\\r\\n        return FUND_CREATION_FEE;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Create a new fund\\r\\n     * @param fundName Name of the fund\\r\\n     * @param fundTicker Ticker symbol for the fund\\r\\n     * @param tokens Array of underlying token addresses\\r\\n     */\\r\\n    function createFund(\\r\\n        string memory fundName,\\r\\n        string memory fundTicker,\\r\\n        address[] memory tokens\\r\\n    ) external {\\r\\n        require(bytes(fundName).length > 0, \\\"Fund name cannot be empty\\\");\\r\\n        require(bytes(fundTicker).length > 0, \\\"Fund ticker cannot be empty\\\");\\r\\n        require(tokens.length > 0, \\\"Must have at least one token\\\");\\r\\n        require(tokens.length <= 20, \\\"Maximum 20 tokens per fund\\\");\\r\\n        \\r\\n        // Check for duplicate tokens\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            require(tokens[i] != address(0), \\\"Invalid token address\\\");\\r\\n            for (uint256 j = i + 1; j < tokens.length; j++) {\\r\\n                require(tokens[i] != tokens[j], \\\"Duplicate tokens not allowed\\\");\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Burn AGI tokens as creation fee\\r\\n        require(\\r\\n            agiToken.balanceOf(msg.sender) >= FUND_CREATION_FEE,\\r\\n            \\\"Insufficient AGI balance for fund creation fee\\\"\\r\\n        );\\r\\n        agiToken.burnFrom(msg.sender, FUND_CREATION_FEE);\\r\\n        \\r\\n        // Create new fund\\r\\n        Fund newFund = new Fund(\\r\\n            fundName,\\r\\n            fundTicker,\\r\\n            tokens,\\r\\n            msg.sender,\\r\\n            oracle,\\r\\n            treasury,\\r\\n            dex,\\r\\n            wavax\\r\\n        );\\r\\n        \\r\\n        // Track the fund\\r\\n        uint256 fundId = funds.length;\\r\\n        funds.push(newFund);\\r\\n        fundById[fundId] = newFund;\\r\\n        creatorFunds[msg.sender].push(fundId);\\r\\n        \\r\\n        emit FundCreated(\\r\\n            fundId,\\r\\n            msg.sender,\\r\\n            fundName,\\r\\n            fundTicker,\\r\\n            address(newFund),\\r\\n            tokens\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get fund information by ID\\r\\n     * @param fundId The fund ID\\r\\n     * @return fundAddress The fund contract address\\r\\n     * @return fundName The fund name\\r\\n     * @return fundTicker The fund ticker\\r\\n     * @return underlyingTokens Array of underlying token addresses\\r\\n     */\\r\\n    function getFund(uint256 fundId) external view returns (\\r\\n        address fundAddress,\\r\\n        string memory fundName,\\r\\n        string memory fundTicker,\\r\\n        address[] memory underlyingTokens\\r\\n    ) {\\r\\n        require(fundId < funds.length, \\\"Fund does not exist\\\");\\r\\n        Fund fund = funds[fundId];\\r\\n        fundAddress = address(fund);\\r\\n        fundName = fund.fundName();\\r\\n        fundTicker = fund.fundTicker();\\r\\n        underlyingTokens = fund.getUnderlyingTokens();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get all funds created by a specific creator\\r\\n     * @param creator The creator address\\r\\n     * @return Array of fund IDs created by the creator\\r\\n     */\\r\\n    function getCreatorFunds(address creator) external view returns (uint256[] memory) {\\r\\n        return creatorFunds[creator];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get total number of funds\\r\\n     * @return Total number of funds created\\r\\n     */\\r\\n    function getTotalFunds() external view returns (uint256) {\\r\\n        return funds.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get all funds (for frontend pagination)\\r\\n     * @param startIndex Starting index\\r\\n     * @param endIndex Ending index\\r\\n     * @return Array of fund addresses\\r\\n     */\\r\\n    function getFunds(uint256 startIndex, uint256 endIndex) external view returns (address[] memory) {\\r\\n        require(startIndex < funds.length, \\\"Start index out of bounds\\\");\\r\\n        require(endIndex <= funds.length, \\\"End index out of bounds\\\");\\r\\n        require(startIndex <= endIndex, \\\"Invalid index range\\\");\\r\\n        \\r\\n        uint256 count = endIndex - startIndex;\\r\\n        address[] memory fundAddresses = new address[](count);\\r\\n        \\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            fundAddresses[i] = address(funds[startIndex + i]);\\r\\n        }\\r\\n        \\r\\n        return fundAddresses;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update oracle address (only owner)\\r\\n     * @param newOracle New oracle address\\r\\n     */\\r\\n    function updateOracle(address newOracle) external onlyOwner {\\r\\n        require(newOracle != address(0), \\\"Invalid oracle address\\\");\\r\\n        oracle = newOracle;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update treasury address (only owner)\\r\\n     * @param newTreasury New treasury address\\r\\n     */\\r\\n    function updateTreasury(address newTreasury) external onlyOwner {\\r\\n        require(newTreasury != address(0), \\\"Invalid treasury address\\\");\\r\\n        treasury = newTreasury;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update AGI token address (only owner)\\r\\n     * @param newAgiToken New AGI token address\\r\\n     */\\r\\n    function updateAgiToken(address newAgiToken) external onlyOwner {\\r\\n        require(newAgiToken != address(0), \\\"Invalid AGI token address\\\");\\r\\n        agiToken = AGIToken(newAgiToken);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update DEX address (only owner)\\r\\n     * @param newDex New DEX address\\r\\n     */\\r\\n    function updateDex(address newDex) external onlyOwner {\\r\\n        require(newDex != address(0), \\\"Invalid DEX address\\\");\\r\\n        dex = newDex;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update WAVAX address (only owner)\\r\\n     * @param newWavax New WAVAX address\\r\\n     */\\r\\n    function updateWavax(address newWavax) external onlyOwner {\\r\\n        require(newWavax != address(0), \\\"Invalid WAVAX address\\\");\\r\\n        wavax = newWavax;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8f944a451de884b24c7f91f0e8d7e198705ec38cf4b5f80268577dbeabd3c687\",\"license\":\"MIT\"},\"contracts/IDEX.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * DEX Interface for swapping tokens and AVAX\\r\\n * @author Avanguard Index\\r\\n */\\r\\ninterface IDEX {\\r\\n    /**\\r\\n     * @dev Swap tokens for AVAX\\r\\n     * @param tokenIn The token address to swap from\\r\\n     * @param amountIn The amount of tokens to swap\\r\\n     * @param amountOutMin The minimum amount of AVAX to receive\\r\\n     * @param to The address to receive the AVAX\\r\\n     * @param deadline The deadline for the swap\\r\\n     * @return amountOut The amount of AVAX received\\r\\n     */\\r\\n    function swapExactTokensForAVAX(\\r\\n        address tokenIn,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountOut);\\r\\n    \\r\\n    /**\\r\\n     * @dev Swap AVAX for tokens\\r\\n     * @param tokenOut The token address to receive\\r\\n     * @param amountOutMin The minimum amount of tokens to receive\\r\\n     * @param to The address to receive the tokens\\r\\n     * @param deadline The deadline for the swap\\r\\n     * @return amountOut The amount of tokens received\\r\\n     */\\r\\n    function swapExactAVAXForTokens(\\r\\n        address tokenOut,\\r\\n        uint256 amountOutMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n    \\r\\n    /**\\r\\n     * @dev Get the expected output amount for a swap\\r\\n     * @param tokenIn The token address to swap from (address(0) for AVAX)\\r\\n     * @param amountIn The amount to swap\\r\\n     * @return amountOut The expected amount to receive\\r\\n     */\\r\\n    function getAmountsOut(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0xd0206efad8b6aa95193a2aa9e60f417d3b2a5293b2a5fb1fc7f820cef89e9eec\",\"license\":\"MIT\"},\"contracts/IOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * Oracle Interface for fetching token prices\\r\\n * @author Avanguard Index\\r\\n */\\r\\ninterface IOracle {\\r\\n    /**\\r\\n     * @dev Get the current price of a token in USD with 8 decimals\\r\\n     * @param token The token address to get price for\\r\\n     * @return price The current price in USD (8 decimals)\\r\\n     */\\r\\n    function getPrice(address token) external view returns (uint256 price);\\r\\n}\\r\\n\",\"keccak256\":\"0x54093242ac1376939ae9d2dbd562646ba452abfba6e380f209d4aae03d6d1654\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Avanguard Index",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "createFund(string,string,address[])": {
        "details": "Create a new fund",
        "params": {
          "fundName": "Name of the fund",
          "fundTicker": "Ticker symbol for the fund",
          "tokens": "Array of underlying token addresses"
        }
      },
      "creationFee()": {
        "details": "Returns the fund creation fee."
      },
      "getCreatorFunds(address)": {
        "details": "Get all funds created by a specific creator",
        "params": {
          "creator": "The creator address"
        },
        "returns": {
          "_0": "Array of fund IDs created by the creator"
        }
      },
      "getFund(uint256)": {
        "details": "Get fund information by ID",
        "params": {
          "fundId": "The fund ID"
        },
        "returns": {
          "fundAddress": "The fund contract address",
          "fundName": "The fund name",
          "fundTicker": "The fund ticker",
          "underlyingTokens": "Array of underlying token addresses"
        }
      },
      "getFunds(uint256,uint256)": {
        "details": "Get all funds (for frontend pagination)",
        "params": {
          "endIndex": "Ending index",
          "startIndex": "Starting index"
        },
        "returns": {
          "_0": "Array of fund addresses"
        }
      },
      "getTotalFunds()": {
        "details": "Get total number of funds",
        "returns": {
          "_0": "Total number of funds created"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAgiToken(address)": {
        "details": "Update AGI token address (only owner)",
        "params": {
          "newAgiToken": "New AGI token address"
        }
      },
      "updateDex(address)": {
        "details": "Update DEX address (only owner)",
        "params": {
          "newDex": "New DEX address"
        }
      },
      "updateOracle(address)": {
        "details": "Update oracle address (only owner)",
        "params": {
          "newOracle": "New oracle address"
        }
      },
      "updateTreasury(address)": {
        "details": "Update treasury address (only owner)",
        "params": {
          "newTreasury": "New treasury address"
        }
      },
      "updateWavax(address)": {
        "details": "Update WAVAX address (only owner)",
        "params": {
          "newWavax": "New WAVAX address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Fund Factory Contract - Creates and manages index funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2481,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "agiToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AGIToken)1015"
      },
      {
        "astId": 2483,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2485,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2487,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "dex",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2489,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "wavax",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2493,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "funds",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_contract(Fund)2463)dyn_storage"
      },
      {
        "astId": 2498,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "fundById",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_contract(Fund)2463)"
      },
      {
        "astId": 2503,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "creatorFunds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Fund)2463)dyn_storage": {
        "base": "t_contract(Fund)2463",
        "encoding": "dynamic_array",
        "label": "contract Fund[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AGIToken)1015": {
        "encoding": "inplace",
        "label": "contract AGIToken",
        "numberOfBytes": "20"
      },
      "t_contract(Fund)2463": {
        "encoding": "inplace",
        "label": "contract Fund",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_contract(Fund)2463)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Fund)",
        "numberOfBytes": "32",
        "value": "t_contract(Fund)2463"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}