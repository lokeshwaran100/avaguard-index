{
  "address": "0x3C8aFa3DB81119aE323DcDBeB92203ecfe9B8A76",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00ffa2313178b3b8838f0061ce6e50aa4bff0077b1210e7e20e74b5c920f709e",
  "receipt": {
    "to": null,
    "from": "0xe63D399611EA823F7442b78d43F972fF61D7b05C",
    "contractAddress": "0x3C8aFa3DB81119aE323DcDBeB92203ecfe9B8A76",
    "transactionIndex": 2,
    "gasUsed": "178505",
    "logsBloom": "0x
    "blockHash": "0xffaa2e0e1a0d205995a8b3c1c624d9139402f6f1a9ba812503ffd5fa73115675",
    "transactionHash": "0x00ffa2313178b3b8838f0061ce6e50aa4bff0077b1210e7e20e74b5c920f709e",
    "logs": [],
    "blockNumber": 45455966,
    "cumulativeGasUsed": "400086",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ecef618a02ccf94ced12b097716955d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Avanguard Index\",\"kind\":\"dev\",\"methods\":{\"getPrice(address)\":{\"details\":\"Get the current price of a token\",\"params\":{\"token\":\"The token address\"},\"returns\":{\"price\":\"The current price in USD (8 decimals)\"}},\"setTokenPrice(address,uint256)\":{\"details\":\"Set a token price for testing\",\"params\":{\"price\":\"The price in USD (8 decimals)\",\"token\":\"The token address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Mock Oracle for testing - provides fixed prices for tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockOracle.sol\":\"MockOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * Oracle Interface for fetching token prices\\r\\n * @author Avanguard Index\\r\\n */\\r\\ninterface IOracle {\\r\\n    /**\\r\\n     * @dev Get the current price of a token in USD with 8 decimals\\r\\n     * @param token The token address to get price for\\r\\n     * @return price The current price in USD (8 decimals)\\r\\n     */\\r\\n    function getPrice(address token) external view returns (uint256 price);\\r\\n}\\r\\n\",\"keccak256\":\"0x54093242ac1376939ae9d2dbd562646ba452abfba6e380f209d4aae03d6d1654\",\"license\":\"MIT\"},\"contracts/MockOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"./IOracle.sol\\\";\\r\\n\\r\\n/**\\r\\n * Mock Oracle for testing - provides fixed prices for tokens\\r\\n * @author Avanguard Index\\r\\n */\\r\\ncontract MockOracle is IOracle {\\r\\n    mapping(address => uint256) public tokenPrices;\\r\\n    \\r\\n    constructor() {\\r\\n        // Set some default prices for testing (in USD with 8 decimals)\\r\\n        // Example: $1 = 100000000 (8 decimals)\\r\\n        tokenPrices[address(0)] = 100000000; // AVAX at $1\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Set a token price for testing\\r\\n     * @param token The token address\\r\\n     * @param price The price in USD (8 decimals)\\r\\n     */\\r\\n    function setTokenPrice(address token, uint256 price) external {\\r\\n        tokenPrices[token] = price;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get the current price of a token\\r\\n     * @param token The token address\\r\\n     * @return price The current price in USD (8 decimals)\\r\\n     */\\r\\n    function getPrice(address token) external view override returns (uint256 price) {\\r\\n        require(tokenPrices[token] > 0, \\\"Price not available for token\\\");\\r\\n        return tokenPrices[token];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa14f91f34da56496ae8d7aa423f36627e45c9883beb619bea81e58babb49a389\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008080526020526305f5e1007fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5556101da8061004f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063204120bc1461004657806341976e0914610078578063431f63c91461008b575b600080fd5b610066610054366004610158565b60006020819052908152604090205481565b60405190815260200160405180910390f35b610066610086366004610158565b6100b7565b6100b561009936600461017a565b6001600160a01b03909116600090815260208190526040902055565b005b6001600160a01b0381166000908152602081905260408120546101205760405162461bcd60e51b815260206004820152601d60248201527f5072696365206e6f7420617661696c61626c6520666f7220746f6b656e000000604482015260640160405180910390fd5b506001600160a01b031660009081526020819052604090205490565b80356001600160a01b038116811461015357600080fd5b919050565b60006020828403121561016a57600080fd5b6101738261013c565b9392505050565b6000806040838503121561018d57600080fd5b6101968361013c565b94602093909301359350505056fea2646970667358221220ca88ddafe03921b1748e10a3414085720a364b7306264513416a9044442edeb164736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063204120bc1461004657806341976e0914610078578063431f63c91461008b575b600080fd5b610066610054366004610158565b60006020819052908152604090205481565b60405190815260200160405180910390f35b610066610086366004610158565b6100b7565b6100b561009936600461017a565b6001600160a01b03909116600090815260208190526040902055565b005b6001600160a01b0381166000908152602081905260408120546101205760405162461bcd60e51b815260206004820152601d60248201527f5072696365206e6f7420617661696c61626c6520666f7220746f6b656e000000604482015260640160405180910390fd5b506001600160a01b031660009081526020819052604090205490565b80356001600160a01b038116811461015357600080fd5b919050565b60006020828403121561016a57600080fd5b6101738261013c565b9392505050565b6000806040838503121561018d57600080fd5b6101968361013c565b94602093909301359350505056fea2646970667358221220ca88ddafe03921b1748e10a3414085720a364b7306264513416a9044442edeb164736f6c63430008140033",
  "devdoc": {
    "author": "Avanguard Index",
    "kind": "dev",
    "methods": {
      "getPrice(address)": {
        "details": "Get the current price of a token",
        "params": {
          "token": "The token address"
        },
        "returns": {
          "price": "The current price in USD (8 decimals)"
        }
      },
      "setTokenPrice(address,uint256)": {
        "details": "Set a token price for testing",
        "params": {
          "price": "The price in USD (8 decimals)",
          "token": "The token address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Mock Oracle for testing - provides fixed prices for tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2927,
        "contract": "contracts/MockOracle.sol:MockOracle",
        "label": "tokenPrices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}